// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(auto()) @map("_id") @db.ObjectId
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Board         Board[]

    @@map("users")
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Board {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    name      String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    columns   Column[]
}

model Column {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    name      String
    tasks     Task[]
    Board     Board?   @relation(fields: [boardId], references: [id])
    boardId   String?  @db.ObjectId
}

model Task {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    title       String
    description String?
    subtasks    Subtask[]
    column      Column    @relation(fields: [columnId], references: [id])
    columnId    String
}

model Subtask {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime @default(now())
    title       String
    isCompleted Boolean
    task        Task     @relation(fields: [taskId], references: [id])
    taskId      String
}
